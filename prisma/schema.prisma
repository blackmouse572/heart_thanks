generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(cuid())
  email               String         @unique
  username            String         @unique
  name                String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  balance             Int            @default(30) // user's points, use to give
  vault               Int            @default(0) // user's points, cannot give
  connections         Connection[]
  ownTransaction      Transactions[] @relation("owner")
  transferTransaction Transactions[] @relation("receiver")
  reviewedTransaction Transactions[] @relation("reviewer")
  password            Password?
  sessions            Session[]
  image               UserImage?
  roles               Role[]         @relation("RoleToUser")
}

model Transactions {
  id           String    @id @default(cuid())
  amount       Int       @default(0)
  title        String
  content      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  ownerId      String
  owner        User      @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  receiverId   String
  receiver     User      @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  reviewed     Boolean   @default(false)
  reviewedAt   DateTime?
  reviewedById String?
  reviewBy     User?     @relation("reviewer", fields: [reviewedById], references: [id])
  status       String    @default("PENDING") // pending, approved, rejected
  // images     NoteImage[]

  @@index([ownerId])
  @@index([ownerId, updatedAt])
  @@map("Transactions")
}

model ApplicationSetting {
  id            String    @id @default(cuid())
  title         String
  description   String?
  isUsed        Boolean   @default(false)
  minTransfer   Int       @default(1) // minimal transfer amount
  averagePoints Int       @default(30) // average points for each user per quater
  maxTransfer   Int       @default(30) // max transfer amount, this will be overriden by user's points (if user has less points than this value)
  allowTransfer Boolean   @default(true) // allow transfer between users
  createdAt     DateTime  @default(now())
  deletedAt     DateTime?
  updatedAt     DateTime  @updatedAt
}

// model NoteImage {
//   id          String       @id @default(cuid())
//   altText     String?
//   contentType String
//   blob        Bytes
//   createdAt   DateTime     @default(now())
//   updatedAt   DateTime     @updatedAt
//   noteId      String
//   note        Transactions @relation(fields: [noteId], references: [id], onDelete: Cascade)

//   @@index([noteId])
// }

model UserImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Permission {
  id          String   @id @default(cuid())
  action      String
  entity      String
  access      String
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]   @relation("PermissionToRole")

  @@unique([action, entity, access])
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String       @default("")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[] @relation("PermissionToRole")
  users       User[]       @relation("RoleToUser")
}

model Verification {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  /// The type of verification, e.g. "email" or "phone"
  type      String
  /// The thing we're trying to verify, e.g. a user's email or phone number
  target    String
  /// The secret key used to generate the otp
  secret    String
  /// The algorithm used to generate the otp
  algorithm String
  /// The number of digits in the otp
  digits    Int
  /// The number of seconds the otp is valid for
  period    Int
  /// The valid characters for the otp
  charSet   String
  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String   @id @default(cuid())
  providerName String
  providerId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerName, providerId])
}
